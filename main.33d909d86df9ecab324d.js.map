{"version":3,"sources":["webpack:///./js/task-2.js","webpack:///./js/task-3.js","webpack:///./js/task-1.js"],"names":["allUsers","userName","name","active","Promise","res","map","user","then","updatedUsers","console","table","makeTransaction","transaction","rej","min","max","id","delay","Math","floor","random","setTimeout","logSuccess","log","logError","warn","amount","catch","ms","resolve","logger","time"],"mappings":"sGAOyBA,EAAUC,E,mDAAVD,EAPX,CACZ,CAAEE,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGUF,EAWZ,QAVd,IAAIG,SAAQ,SAACC,GAIlBA,EAHqBL,EAASM,KAAI,SAACC,GAAD,OAChCA,EAAKL,OAASD,EAAd,iBAA8BM,EAA9B,CAAoCJ,QAASI,EAAKJ,SAAWI,UAQnCC,MAFjB,SAACC,GAAD,OAAkBC,QAAQC,MAAMF,MChB/C,IAIMG,EAAkB,SAACC,GACvB,OAAO,IAAIT,SAAQ,SAACC,EAAKS,GAAQ,IALAC,EAAKC,EAM5BC,EAAOJ,EAAPI,GACFC,GAPyBH,EAOS,IAPJC,EAOS,IANxCG,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,EAAM,GAAKA,IAOlDO,YAAW,WACUH,KAAKE,SAAW,GAEjChB,EAAI,CAAEY,KAAIC,UAEVJ,EAAIG,KAELC,OAIDK,EAAa,SAAC,GAAkB,IAAhBN,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACxBR,QAAQc,IAAR,eAA2BP,EAA3B,iBAA8CC,EAA9C,OAGIO,EAAW,SAACR,GAChBP,QAAQgB,KAAR,gCAA6CT,EAA7C,8BAGFL,EAAgB,CAAEK,GAAI,GAAIU,OAAQ,MAAOnB,KAAKe,GAAYK,MAAMH,GAEhEb,EAAgB,CAAEK,GAAI,GAAIU,OAAQ,MAAOnB,KAAKe,GAAYK,MAAMH,GAEhEb,EAAgB,CAAEK,GAAI,GAAIU,OAAQ,KAAMnB,KAAKe,GAAYK,MAAMH,GAE/Db,EAAgB,CAAEK,GAAI,GAAIU,OAAQ,MAAOnB,KAAKe,GAAYK,MAAMH,GCjChE,IAAMP,EAAQ,SAACW,GACb,OAAO,IAAIzB,SAAQ,SAAC0B,GAClBR,YAAW,WACTQ,EAAQD,KACPA,OAIDE,EAAS,SAACC,GAAD,OAAUtB,QAAQc,IAAR,kBAA8BQ,EAA9B,OAEzBd,EAAM,KAAMV,KAAKuB,GACjBb,EAAM,KAAMV,KAAKuB,GACjBb,EAAM,KAAMV,KAAKuB,GACjBb,EAAM,KAAMV,KAAKuB,GACjBb,EAAM,KAAMV,KAAKuB,K","file":"main.33d909d86df9ecab324d.js","sourcesContent":["const users = [\n  { name: \"Mango\", active: true },\n  { name: \"Poly\", active: false },\n  { name: \"Ajax\", active: true },\n  { name: \"Lux\", active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise((res) => {\n    const updatedUsers = allUsers.map((user) =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    );\n    res(updatedUsers);\n  });\n};\n\nconst logger = (updatedUsers) => console.table(updatedUsers);\n\ntoggleUserState(users, \"Mango\").then(logger);\n","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  return new Promise((res, rej) => {\n    const { id } = transaction;\n    const delay = randomIntegerFromInterval(200, 500);\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n      if (canProcess) {\n        res({ id, delay });\n      } else {\n        rej(id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = ({ id, delay }) => {\n  console.log(`Transaction ${id} processed in ${delay}ms`);\n};\n\nconst logError = (id) => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n","const delay = (ms) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n};\n\nconst logger = (time) => console.log(`Resolved after ${time}ms`);\n\ndelay(1000).then(logger);\ndelay(3000).then(logger);\ndelay(4000).then(logger);\ndelay(5000).then(logger);\ndelay(7000).then(logger);\n"],"sourceRoot":""}